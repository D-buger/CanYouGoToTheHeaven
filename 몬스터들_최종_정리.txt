※다음 이동 패턴들은 최종적으로 취하는 패턴들 기준.

플랫폼 위에서만 좌, 우 왕복을 반복하는 이동 패턴을 가진 다람쥐, 심술 다람쥐, 병아리, 암탉의 4종류의 몬스터

플랫폼 또는 공중에 고정되어 움직이지 않는 버럭 새, 폭탄 새, 플랭크톤 형 외계인, 신성 모기 4종류의 몬스터

공중에서 좌, 우 왕복을 반복하는 이동 패턴을 가진 문어형 외계인, 파란 천사 2종류의 몬스터

공중에서 플레이어 발견 시 돌진을 시전하는 패턴을 가진 하늘 다람쥐, 잠꾸러기 새 2종류의 몬스터

플레이어의 높이 + n의 값을 유지하며 플레이어를 끈질기게 추적하는 UFO외계인, 대천사 2종류의 몬스터

(공중 및 플랫폼)좌우 왕복 상태, 고정 상태, 돌진 상태, 특정 Vector값을 목표로 이동하는 상태
-----총 4가지의 이동 상태 필요-----

접촉 시 대미지를 주는 방식
n개의 발사체를 총 n의 각도로 발사하여 대미지를 주는 방식
('유도 발사체'라는 특별한 발사체가 따로 존재한다)
좌, 우를 확인 후 좌, 우에 대미지를 주는 방식
특정 플랫폼을 '저주'상태로 바꾸어 일정시간 머물 경우 대미지를 주는 방식
'레이저'형식 발사체를 발사하여 대미지를 주는 방식
(플레이어에게 독단적인 무적시간을 부여해야할 것)
-----총 4가지의 공격 상태 필요-----
(단, '저주'플랫폼과 '유도 발사체'는 따로 뺄 가능성이 있음)

모든 몬스터는
체력, 누적 대미지 시간 계산 을 가지며
일부 몬스터는
감지 범위, 감지 여부, 이동 속도, 돌진 속도 등을 가져야함.


-----그 외-----
1] 몬스터의 추적에 관해서   _해결O: 방안1)콜라이더 사용하여 해결할 수 있음_
몬스터가 추적을 하다가도 포기를 하는 시점이 존재한다. 이를 구현하기 위해서는
감지 범위, 감지 여부, 추적 포기 시간, 추적 포기 로직을 담당하는 코루틴이 존재한다.
if vector2.distance <= 감지 범위
	if coroutine != null { stopCoroutine(포기 판단) }
	//포기 판단을 멈추고 계속 추적
else if vector2.distance > 감지 범위 //감지 범위 밖으로 나가면
	{ startCoroutine(포기 판단) }

즉, 범위를 벗아나면 포기 판단 실행, 만약 범위 들어온 경우 포기 판단이 실행중이었을 시 중단
이를 update에 넣어서 판단하되, 과부하가 예상될 시 코루틴 등으로 해결할 것

2] 공격에 관해서
기본적으로 일부 몬스터를 제외하고는 공격 중 움직여선 안되기 때문에, 발사체를 쏠 준비 단계에서 움직임을 고정하고, 공격이 진행중일 때에는 움직임이 변경 되어서는 안 된다.
즉, 원거리 공격을 하는 적은 공격중을 판단하는 isAttacking이 필요할 것(애니메이션 때문에 필요).

3] 몬스터가 대미지를 받는 방식에 관하여
'플레이어 발사체'에 적이 감지될 때 마다 몬스터 내부의 누적 damageTime을 추가시키고, >= 1이 될시 해당 몬스터에게 대미지를 주는 방식.
startCoroutine? or Update? 아무거나 하되 연산이 쓸데없이 된다고 생각되면 바꿀것